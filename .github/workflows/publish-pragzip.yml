name: Publish Pragzip to PyPI

on:
  push:
    tags:
      - 'pragzip-v*.*.*'

jobs:
  Deploy-Wheels:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [macos-latest, windows-latest]
        archs: [auto64]
        # manylinux1 is not supported anymore because it won't compile C++17 code
        # manylinux2010 runs into this problem https://github.com/pypa/cibuildwheel/issues/1001
        # MacOS and Windows ignore the manylinux-image version because they are not Linux.
        include:
        - os: ubuntu-latest
          manylinux-image: manylinux2014
          archs: auto64
        - os: ubuntu-latest
          manylinux-image: manylinux2014
          archs: auto32
        - os: ubuntu-latest
          manylinux-image: manylinux_2_28
          archs: auto64
    env:
      # By default, both build (https://pypi.org/project/build/)
      # and cibuildwheel (https://pypi.org/project/cibuildwheel/) seem to try to compile for macOS 10.9
      # based on the wheel output names in the logs. However, C++17 seems to have introduced some alignment
      # for classes, which results in this error for the GzipReader class itself even without "alignas" being used:
      # > error: aligned allocation function of type 'void *(std::size_t, std::align_val_t)'
      # >        is only available on macOS 10.14 or newer
      # See also this discussion https://bugs.chromium.org/p/chromium/issues/detail?id=1274388
      #
      # In the end, 10.9 support should not be necessary anymore in almost 2023. Apple-support for that seems
      # to have stopped 2016-12-01 (https://endoflife.date/macos) and even support for 10.14, which was introduced
      # in 2019-09-24 has already stopped in 2021-10-25, so more than a year ago.
      #
      # Release                  | Release Date  | End of Life
      # -------------------------+---------------+-------------
      # macOS 13 (Ventura)       | 2022-10-24    | some time after 2022-11
      # macOS 12 (Monterey)      | 2021-10-25    | some time after 2022-11
      # macOS 11 (Big Sur)       | 2020-11-12    | some time after 2022-11
      # macOS 10.15 (Catalina)   | 2019-10-07    | 2022-09-12
      # macOS 10.14 (Mojave)     | 2018-09-24    | 2021-10-25
      # macOS 10.13 (High Sierra)| 2017-09-25    | 2020-12-01
      # macOS 10.12 (Sierra)     | 2016-09-20    | 2019-10-01
      # OS X 10.11 (El Capitan)  | 2015-09-30    | 2018-12-01
      # OS X 10.10 (Yosemite)    | 2014-10-16    | 2017-08-01
      # OS X 10.9 (Mavericks)    | 2013-10-22    | 2016-12-01
      MACOSX_DEPLOYMENT_TARGET: "10.14"

    # The following parts should be an exact copy of the wheels-pragzip.yml workflow:
    # ------ Begin Copy-Paste of wheels-pragzip.yml ------
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install Dependencies
      run: |
        python3 -m pip install --upgrade pip
        python3 -m pip install --upgrade-strategy eager --upgrade cython twine cibuildwheel build

    - name: Build Tarball
      working-directory: python/pragzip
      run: python3 -m build --sdist

    - name: Build Wheels
      env:
        CIBW_ARCHS: ${{ matrix.archs }}
        CIBW_MANYLINUX_X86_64_IMAGE: ${{ matrix.manylinux-image }}
      run: python -m cibuildwheel --output-dir dist python/pragzip

    - name: Check Wheels
      run: twine check dist/* python/pragzip/dist/*
    # ------ End Copy-Paste of wheels-pragzip.yml ------

    - name: Publish Tarball to PyPI
      env:
        TWINE_PASSWORD: ${{ secrets.TWINE_PASSWORD_PRAGZIP }}
      working-directory: python/pragzip
      # Only one out of the OS matrix needs to upload the tarball.
      if: matrix.manylinux-image == 'manylinux2014' && matrix.os == 'ubuntu-latest'
      run: twine upload --skip-existing -u __token__ dist/*

    - name: Publish Wheels to PyPI
      env:
        TWINE_PASSWORD: ${{ secrets.TWINE_PASSWORD_PRAGZIP }}
      run: twine upload --skip-existing -u __token__ dist/*


  Deploy-Conda:
    # Not working yet and indexed_bzip2 only has a single download from conda ...
    if: false
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]

    env:
      MACOSX_DEPLOYMENT_TARGET: "10.14"

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive

    - uses: conda-incubator/setup-miniconda@v2
      with:
        auto-update-conda: true

    - name: Fix macOS CommandLineTools Bug
      if: matrix.os == 'macos-latest'
      shell: bash
      run: |
        # See test.yml workflow for explanation but in short: conda build only works with the older SDK installed.
        wget https://github.com/phracker/MacOSX-SDKs/releases/download/10.13/MacOSX10.9.sdk.tar.xz
        tar -xf MacOSX10.9.sdk.tar.xz
        cat <<EOF >> conda/conda_build_config.yaml
        CONDA_BUILD_SYSROOT:
          - $PWD/MacOSX10.9.sdk
        EOF

    - name: Build Conda Packages
      # TODO copy and custom fit the conda folder into python/pragzip. Currently, it will upload to indexed_bzip2!
      # Bash shells do not use ~/.profile or ~/.bashrc so these shells need to be explicitely declared as shell:
      # bash -l {0} on steps that need to be properly activated
      shell: bash -l {0}
      env:
        ANACONDA_TOKEN: ${{ secrets.ANACONDA_TOKEN }}
      run: |
        # Circumvent bug introduced in https://github.com/conda/conda/pull/11364#issuecomment-1139184379
        # https://github.com/conda/conda-build/issues/4509
        conda install conda=4.12.0 conda-build anaconda-client conda-verify packaging
        conda config --set anaconda_upload yes
        cd conda  # TODO copy and custom fit the conda folder into python/pragzip
        python3 -m pip install --user build
        python3 -m build -o . --sdist ../python/pragzip
        mv pragzip-*.tar* src.tar
        conda build --token "$ANACONDA_TOKEN" .
