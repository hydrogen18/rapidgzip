% https://www.acm.org/publications/authors/bibtex-formatting

% Check that all links use https:// instead of http://

% https://datatracker.ietf.org/doc/html/draft-carpenter-rfc-citation-recs-01#section-5.2

% %techreport{rfc1654,
%     author       = "Yakov Rekhter and Tony Li",
%     title        = "{A Border Gateway Protocol 4 (BGP-4)}",
%     howpublished = {Internet Requests for Comments},
%     type         = "{RFC}",
%     number       = 1654,
%     pages        = {1-56},
%     year         = {1995},
%     month        = {July},
%     issn         = {2070-1721},
%     publisher    = "{RFC Editor}",
%     institution  = "{RFC Editor}",
%     url          = {https://www.rfc-editor.org/rfc/rfc1654.txt}
% }

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% RFCs %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Base citation from: https://dl.acm.org/doi/book/10.17487/RFC1951 added fields according to IETF
@techreport{RFC1951,
    author       = {Peter Deutsch},
    title        = {{DEFLATE} Compressed Data Format Specification Version 1.3},
    howpublished = {Internet Requests for Comments},
    type         = {RFC},
    number       = {1951},
    year         = {1996},
    month        = {5},
    publisher    = {RFC Editor},
    institution  = {RFC Editor},
    url          = {https://www.rfc-editor.org/rfc/rfc1951},
    doi          = {10.17487/RFC1951},
    abstract     = {This specification defines a lossless compressed data format that compresses data using a combination of the LZ77 algorithm and Huffman coding, with efficiency comparable to the best currently available general-purpose compression methods. The data can be produced or consumed, even for an arbitrarily long sequentially presented input data stream, using only an a priori bounded amount of intermediate storage. The format can be implemented readily in a manner not covered by patents.}
}

@techreport{RFC1952,
    author       = {Peter Deutsch},
    title        = {{GZIP} file format specification version 4.3},
    howpublished = {Internet Requests for Comments},
    type         = {RFC},
    number       = {1952},
    year         = {1996},
    month        = {5},
    publisher    = {RFC Editor},
    institution  = {RFC Editor},
    url          = {https://www.rfc-editor.org/rfc/rfc1952},
    doi          = {10.17487/RFC1952},
    abstract     = {This specification defines a lossless compressed data format that is
                    compatible with the widely used GZIP utility.  The format includes a
                    cyclic redundancy check value for detecting data corruption.  The
                    format presently uses the DEFLATE method of compression but can be
                    easily extended to use other compression methods.  The format can be
                    implemented readily in a manner not covered by patents.}
}

@techreport{zstandard,
    author       = {Collet, Yann and Kucherawy, Murray},
    title        = {Zstandard Compression and the '{application/zstd}' Media Type},
    howpublished = {Internet Requests for Comments},
    type         = {RFC},
    number       = {8878},
    year         = {2021},
    month        = {2},
    publisher    = {RFC Editor},
    institution  = {RFC Editor},
    url          = {https://www.rfc-editor.org/rfc/rfc8878},
    doi          = {10.17487/RFC8878},
}

@techreport{png,
    author       = {Thomas Boutell and others},
    title        = {{PNG} (Portable Network Graphics) Specification Version 1.0},
    howpublished = {Internet Requests for Comments},
    type         = {RFC},
    number       = {2083},
    year         = {1997},
    month        = {3},
    publisher    = {RFC Editor},
    institution  = {RFC Editor},
    url          = {https://www.rfc-editor.org/rfc/rfc2083},
    doi          = {10.17487/RFC2083},
    abstract     = {
        This document describes PNG (Portable Network Graphics), an
        extensible file format for the lossless, portable, well-compressed
        storage of raster images.  PNG provides a patent-free replacement for
        GIF and can also replace many common uses of TIFF.  Indexed-color,
        grayscale, and truecolor images are supported, plus an optional alpha
        channel.  Sample depths range from 1 to 16 bits.

        PNG is designed to work well in online viewing applications, such as
        the World Wide Web, so it is fully streamable with a progressive
        display option.  PNG is robust, providing both full file integrity
        checking and simple detection of common transmission errors.  Also,
        PNG can store gamma and chromaticity data for improved color matching
        on heterogeneous platforms.

        This specification defines the Internet Media Type image/png.
    }
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Github %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

@software{indexed_gzip,
    author       = {Paul McCarthy},
    title        = {{indexed\_gzip}: Fast random access of gzip files in {Python}},
    year         = {2022},
    publisher    = {GitHub},
    url          = {https://github.com/pauldmccarthy/indexed_gzip},
    urldate      = {2022-11-18},
}

@software{pigz,
    author       = {Mark Adler},
    title        = {Pigz: A parallel implementation of gzip for modern multi-processor, multi-core machines},
    year         = {2022},
    publisher    = {GitHub},
    url          = {https://github.com/madler/pigz},
    urldate      = {2022-11-18},
}

@software{lbzip2,
    author       = {Ersek, Laszlo and Izdebski, Mikolaj},
    title        = {Parallel bzip2 utility},
    year         = {2023},
    publisher    = {GitHub},
    url          = {https://github.com/kjn/lbzip2},
    urldate      = {2023-04-02},
}

% Double curlies so as to not abbreviate "Intel" as "I."
@software{igzip,
    author       = {{Intel Corporation}},
    title        = {{Intel(R)} Intelligent Storage Acceleration Library},
    year         = {2022},
    publisher    = {GitHub},
    url          = {https://github.com/intel/isa-l},
    urldate      = {2022-11-18},
}

@software{ratarmount,
    author       = {Maximilian Knespel},
    title        = {Ratarmount: Random Access Tar Mount},
    year         = {2022},
    publisher    = {GitHub},
    url          = {https://github.com/mxmlnkn/ratarmount},
    urldate      = {2022-11-18},
}

@software{libdeflate,
    author       = {Eric Biggers},
    title        = {libdeflate: Heavily optimized library for {DEFLATE}/zlib/gzip compression and decompression},
    year         = {2022},
    publisher    = {GitHub},
    url          = {https://github.com/ebiggers/libdeflate},
    urldate      = {2022-11-18},
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Other %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

@inproceedings{pugz,
    author    = {Kerbiriou, Maël and Chikhi, Rayan},
    booktitle = {2019 IEEE International Parallel and Distributed Processing Symposium Workshops (IPDPSW)},
    title     = {Parallel Decompression of Gzip-Compressed Files and Random Access to {DNA} Sequences},
    year      = {2019},
    volume    = {},
    number    = {},
    pages     = {209-217},
    doi       = {10.1109/IPDPSW.2019.00042}
}

% Double curlies so as to not abbreviate "Intel" as "I."
@misc{qat,
    author       = {{Intel Corporation}},
    title        = {{Intel(R) QAT}: Performance, Scale, and Efficiency},
    year         = {2022},
    publisher    = {GitHub},
    url          = {https://www.intel.com/content/www/us/en/architecture-and-technology/intel-quick-assist-technology-overview.html},
    urldate      = {2022-11-18},
}

@misc{lzbench,
    author       = {Przemysław Skibiński},
    title        = {{lzbench is an in-memory benchmark of open-source {LZ77/LZSS/LZMA} compressors}},
    year         = {2022},
    publisher    = {GitHub},
    url          = {https://github.com/inikep/lzbench},
    urldate      = {2023-04-01},
}


@article{zlib,
  title  = {Zlib compression library},
  author = {Gailly, Jean-loup and Adler, Mark},
  year   = {2004}
}

@misc{zip,
    title     = {{APPNOTE.TXT} - {.ZIP} File Format Specification},
    author    = {Katz, Phillip and others},
    year      = {2022},
    month     = {11},
    publisher = {{PKWARE Inc.}},
    version   = {6.3.10},
    url       = {https://pkware.cachefly.net/webdocs/APPNOTE/APPNOTE-6.3.10.TXT}
}

@misc{odt,
    title  = {Open Document Format for Office Applications ({OpenDocument}) Version 1.3},
    author = {Standard, OASIS},
    year   = {2021},
    url    = {https://www.oasis-open.org/standards/}
}

@misc{jar,
    title  = {{JAR} File Specification},
    author = {Oracle},
    year   = {2022},
    url    = {https://docs.oracle.com/en/java/javase/13/docs/specs/jar/jar.html}
}

@techreport{xlsx,
    type        = {Standard},
    author      = {International Organization for Standardization},
    title       = {Information technology -- Document description and processing languages -- Office Open {XML} File Formats-- Part 1: Fundamentals and Markup Language Reference},
    shorttitle  = {{ISO}/{IEC} 29500-1:2016},
    month       = {11},
    year        = {2016},
    address     = {Geneva, CH},
    institution = {International Organization for Standardization},
}

@misc{imagenet21k,
    title        = {{ImageNet21K} (Winter 2021 Release)},
    journal      = {},
    author       = {Jia Deng and Wei Dong and Richard Socher and Li-Jia Li and Kai Li and Li Fei-Fei},
    year         = {2021},
    url          = {https://www.image-net.org/},
    license      = {},
    superseded   = {},
    lastaccessed = {2023-01-15},
}

@article{functionalWorldMap,
    author     = {Gordon A. Christie and
                  Neil Fendley and
                  James Wilson and
                  Ryan Mukherjee},
    title      = {Functional Map of the World},
    journal    = {CoRR},
    volume     = {abs/1711.07846},
    year       = {2017},
    url        = {http://arxiv.org/abs/1711.07846},
    eprinttype = {arXiv},
    eprint     = {1711.07846},
    timestamp  = {Tue, 16 Nov 2021 13:04:26 +0100},
    biburl     = {https://dblp.org/rec/journals/corr/abs-1711-07846.bib},
    bibsource  = {dblp computer science bibliography, https://dblp.org}
}

@online{commoncrawl,
    title  = {Common Crawl},
    author = {Common Crawl},
    year   = {2023},
    url    = {https://commoncrawl.org/},
    lastaccessed = {2023-01-15},
}

@online{silesia,
    title  = {The Silesia corpus},
    author = {Sebastian Deorowicz},
    year   = {2003},
    url    = {https://sun.aei.polsl.pl//~sdeor/index.php?page=silesia},
    lastaccessed = {2023-01-15},
}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Paper %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

@article{htslib,
    author   = {Bonfield, James K. and Marshall, John and Danecek, Petr and Li, Heng and Ohan, Valeriu and Whitwham, Andrew and Keane, Thomas and Davies, Robert M.},
    title    = "{{HTSlib}: {C} library for reading/writing high-throughput sequencing data}",
    journal  = {GigaScience},
    volume   = {10},
    number   = {2},
    year     = {2021},
    month    = {02},
    abstract = "{Since the original publication of the VCF and SAM formats, an explosion of software tools have been created to process these data files. To facilitate this a library was produced out of the original SAMtools implementation, with a focus on performance and robustness. The file formats themselves have become international standards under the jurisdiction of the Global Alliance for Genomics and Health.We present a software library for providing programmatic access to sequencing alignment and variant formats. It was born out of the widely used SAMtools and BCFtools applications. Considerable improvements have been made to the original code plus many new features including newer access protocols, the addition of the CRAM file format, better indexing and iterators, and better use of threading.Since the original Samtools release, performance has been considerably improved, with a BAM read-write loop running 5 times faster and BAM to SAM conversion 13 times faster (both using 16 threads, compared to Samtools 0.1.19). Widespread adoption has seen HTSlib downloaded \\&gt;1 million times from GitHub and conda. The C library has been used directly by an estimated 900 GitHub projects and has been incorporated into Perl, Python, Rust, and R, significantly expanding the number of uses via other languages. HTSlib is open source and is freely available from htslib.org under MIT/BSD license.}",
    issn     = {2047-217X},
    doi      = {10.1093/gigascience/giab007},
    url      = {https://doi.org/10.1093/gigascience/giab007},
    note     = {giab007},
    eprint   = {https://academic.oup.com/gigascience/article-pdf/10/2/giab007/36332285/giab007.pdf},
}

@inproceedings{gzip_on_a_chip,
    author    = {Abdelfattah, Mohamed S. and Hagiescu, Andrei and Singh, Deshanand},
    title     = {Gzip on a Chip: High Performance Lossless Data Compression on {FPGA}s Using {OpenCL}},
    year      = {2014},
    isbn      = {9781450330077},
    publisher = {Association for Computing Machinery},
    address   = {New York, NY, USA},
    url       = {https://doi.org/10.1145/2664666.2664670},
    doi       = {10.1145/2664666.2664670},
    abstract  = {Hardware implementation of lossless data compression is important for optimizing the capacity/cost/power of storage devices in data centers, as well as communication channels in high-speed networks. In this work we use the Open Computing Language (OpenCL) to implement high-speed data compression (Gzip) on a field-programmable gate-arrays (FPGA). We show how we make use of a heavily-pipelined custom hardware implementation to achieve the high throughput of ~3 GB/s with more than 2x compression ratio over standard compression benchmarks. When compared against a highly-tuned CPU implementation, the performance-per-watt of our OpenCL FPGA implementation is 12x better and compression ratio is on-par. Additionally, we compare our implementation to a hand-coded commercial implementation of Gzip to quantify the gap between a high-level language like OpenCL, and a hardware description language like Verilog. OpenCL performance is 5.3\% lower than Verilog, and area is 2\% more logic and 25\% more of the FPGA's available memory resources but the productivity gains are significant.},
    booktitle = {Proceedings of the International Workshop on OpenCL 2013 \& 2014},
    articleno = {4},
    numpages  = {9},
    location  = {Bristol, United Kingdom},
    series    = {IWOCL '14}
}

@article{Ledwon2020HighThroughputFH,
  title   = {High-Throughput {FPGA}-Based Hardware Accelerators for Deflate Compression and Decompression Using High-Level Synthesis},
  author  = {Morgan Ledwon and Bruce F. Cockburn and Jie Han},
  journal = {IEEE Access},
  year    = {2020},
  doi     = {10.1109/ACCESS.2020.2984191},
  volume  = {8},
  pages   = {62207-62217}
}

@inproceedings{10.1145/3489517.3530450,
    author    = {Gao, Ruihao and Li, Xueqi and Li, Yewen and Wang, Xun and Tan, Guangming},
    title     = {{MetaZip}: A High-Throughput and Efficient Accelerator for {DEFLATE}},
    year      = {2022},
    isbn      = {9781450391429},
    publisher = {Association for Computing Machinery},
    address   = {New York, NY, USA},
    url       = {https://doi.org/10.1145/3489517.3530450},
    doi       = {10.1145/3489517.3530450},
    abstract  = {Booming data volume has become an important challenge for data center storage and bandwidth resources. Consequently, fast and efficient compression architecture is becoming the most fundamental design in data centers. However, the compression ratio (CR) and compression throughput are often difficult to achieve at the same time on existing computing platforms. DEFLATE is a widely used compression format in data centers, which is an ideal case for hardware acceleration. Unfortunately, Deflate has an inherent connection among its special memory access pattern, which limits a higher throughput.In this paper, we propose MetaZip, a high-throughput and scalable data-compression architecture, which is targeted for FPGA-enabled data centers. To improve the compression throughput within the constraints of FPGA resources, we propose an adaptive parallel-width pipeline, which can be fed 64bytes per cycle. To balance the compression quality, we propose a series of sub-modules (e.g. 8-bytes MetaHistory, Seed Bypass, Serialization Predictor). Experimental results show that MetaZip achieves the throughput of 15.6GB/s with a single engine, which is 234X/2.78X than a CPU gzip baseline and FPGA based architecture, respectively.},
    booktitle = {Proceedings of the 59th ACM/IEEE Design Automation Conference},
    pages     = {319–324},
    numpages  = {6},
    location  = {San Francisco, California},
    series    = {DAC '22}
}

@article{BROWN2013S21,
    title    = {Improved recovery and reconstruction of {DEFLATE}d files},
    journal  = {Digital Investigation},
    volume   = {10},
    pages    = {S21-S29},
    year     = {2013},
    note     = {The Proceedings of the Thirteenth Annual DFRWS Conference},
    issn     = {1742-2876},
    doi      = {https://doi.org/10.1016/j.diin.2013.06.003},
    url      = {https://www.sciencedirect.com/science/article/pii/S1742287613000492},
    author   = {Ralf D. Brown},
    keywords = {Data recovery, File reconstruction, ZIP archives, DEFLATE compression, Language models},
}

@article{park2008data,
    title   = {Data extraction from damage compressed file for computer forensic purposes},
    author  = {Park, Bora and Savoldi, Antonio and Gubian, Paolo and Park, Jungheum and Lee, Seok Hee and Lee, Sangjin},
    journal = {International Journal of Hybrid Information Technology},
    volume  = {1},
    number  = {4},
    pages   = {89--102},
    year    = {2008}
}

@INPROCEEDINGS{gpu-decompresion,
    author    = {Sitaridi, Evangelia and Mueller, Rene and Kaldewey, Tim and Lohman, Guy and Ross, Kenneth A.},
    booktitle = {2016 45th International Conference on Parallel Processing (ICPP)},
    title     = {Massively-Parallel Lossless Data Decompression},
    year      = {2016},
    volume    = {},
    number    = {},
    pages     = {242-247},
    doi       = {10.1109/ICPP.2016.35}
}

@article{smith1982cache,
    title     = {Cache memories},
    author    = {Smith, Alan Jay},
    journal   = {ACM Computing Surveys (CSUR)},
    volume    = {14},
    number    = {3},
    pages     = {473--530},
    year      = {1982},
    publisher = {ACM New York, NY, USA}
}

@inproceedings{mpi-io-caching,
    author    = {Byna, Surendra and Chen, Yong and Sun, Xian-He and Thakur, Rajeev and Gropp, William},
    booktitle = {SC '08: Proceedings of the 2008 ACM/IEEE Conference on Supercomputing},
    title     = {Parallel I/O prefetching using MPI file caching and I/O signatures},
    year      = {2008},
    volume    = {},
    number    = {},
    pages     = {1-12},
    doi       = {10.1109/SC.2008.5213604}
}

@INPROCEEDINGS{cmos-gzip-decompression,
    author    = {Satpathy, Sudhir and Suresh, Vikram and Kumar, Raghavan and Gopal, Vinodh and Guilford, James and Anders, Mark and Kaul, Himanshu and Agarwal, Amit and Hsu, Steven and Krishnamurthy, Ram and De, Vivek and Mathew, Sanu},
    booktitle = {2019 Symposium on VLSI Circuits},
    title     = {A {1.4GHz} {20.5Gbps} {GZIP} decompression accelerator in 14nm {CMOS} featuring dual-path out-of-order speculative {Huffman} decoder and multi-write enabled register file array},
    year      = {2019},
    volume    = {},
    number    = {},
    pages     = {C238-C239},
    doi       = {10.23919/VLSIC.2019.8777934}
}

@inproceedings{gpu-huffman,
    author    = {Wei\ss{}enberger, Andr\'{e} and Schmidt, Bertil},
    title     = {Massively Parallel Huffman Decoding on {GPU}s},
    year      = {2018},
    isbn      = {9781450365109},
    publisher = {Association for Computing Machinery},
    address   = {New York, NY, USA},
    url       = {https://doi.org/10.1145/3225058.3225076},
    doi       = {10.1145/3225058.3225076},
    abstract  = {Data compression is a fundamental building block in a wide range of applications. Besides its intended purpose to save valuable storage on hard disks, compression can be utilized to increase the effective bandwidth to attached storage as realized by state-of-the-art file systems. In the foreseeing future, on-the-fly compression and decompression will gain utmost importance for the processing of data-intensive applications such as streamed Deep Learning tasks or Next Generation Sequencing pipelines, which establishes the need for fast parallel implementations. Huffman coding is an integral part of a number of compression methods. However, efficient parallel implementation of Huffman decompression is difficult due to inherent data dependencies (i.e. the location of a decoded symbol depends on its predecessors). In this paper, we present the first massively parallel decoder implementation that is compatible with Huffman's original method by taking advantage of the self-synchronization property of Huffman codes. Our performance evaluation on three different CUDA-enabled GPUs (TITAN V, TITAN XP, GTX 1080) demonstrates speedups of over one order-of-magnitude compared to the state-of-art CPU-based Zstandard Huffman decoder. Our implementation is available at https://github.com/weissenberger/gpuhd.},
    booktitle = {Proceedings of the 47th International Conference on Parallel Processing},
    articleno = {27},
    numpages  = {10},
    keywords  = {Huffman Decoding, GPUs, Data compression, CUDA},
    location  = {Eugene, OR, USA},
    series    = {ICPP 2018}
}

@inproceedings{gill2007amp,
    title     = {{AMP}: Adaptive Multi-stream Prefetching in a Shared Cache},
    author    = {Gill, Binny S. and Bathen, Luis Angel D.},
    booktitle = {Proceedings of the 5th USENIX Conference on File and Storage Technologies (FAST’07)},
    volume    = {7},
    number    = {5},
    pages     = {185--198},
    year      = {2007}
}


@article{lzss,
    author     = {Storer, James A. and Szymanski, Thomas G.},
    title      = {Data Compression via Textual Substitution},
    year       = {1982},
    issue_date = {Oct. 1982},
    publisher  = {Association for Computing Machinery},
    address    = {New York, NY, USA},
    volume     = {29},
    number     = {4},
    issn       = {0004-5411},
    url        = {https://doi.org/10.1145/322344.322346},
    doi        = {10.1145/322344.322346},
    journal    = {J. ACM},
    month      = {oct},
    pages      = {928–951},
    numpages   = {24}
}

@article{lz77,
    author  = {Ziv, Jacob and Lempel, Abraham},
    journal = {IEEE Transactions on Information Theory},
    title   = {A universal algorithm for sequential data compression},
    year    = {1977},
    volume  = {23},
    number  = {3},
    pages   = {337-343},
    doi     = {10.1109/TIT.1977.1055714}
}

@article{huffman,
    author  = {Huffman, David A.},
    journal = {Proceedings of the IRE},
    title   = {A Method for the Construction of Minimum-Redundancy Codes},
    year    = {1952},
    volume  = {40},
    number  = {9},
    pages   = {1098-1101},
    doi     = {10.1109/JRPROC.1952.273898}
}
